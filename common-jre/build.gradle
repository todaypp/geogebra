plugins {
    id 'java-library'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.7'
}

description 'Common parts of GeoGebra that depends on JRE support.'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    api project(':common')
    implementation project(':giac-jni')
    implementation project(':renderer-base')
    implementation project(':editor-base')
    testImplementation project(':ggbjdk')
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

sourceSets {
    nonfree
    main {
        resources {
            if (!project.hasProperty("usegpl")) {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

if (hasProperty("eclipse")) {
    eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
}

spotbugs {
    ignoreFailures = true
    excludeFilter = file("../config/spotbugs.xml")
}

pmd {
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("../config/pmd.xml")
}
test {
    ignoreFailures = true
}

// http://stackoverflow.com/questions/20638039/gradle-and-jacoco-instrument-classes-from-a-separate-subproject
gradle.projectsEvaluated {
    // include src from all dependent projects (compile dependency) in JaCoCo test report
    jacocoTestReport {
        // get all projects we have a (compile) dependency on
        def projs = configurations.implementation.getAllDependencies().withType(ProjectDependency).collect{it.getDependencyProject()}
        projs.each {
            additionalSourceDirs files(it.sourceSets.main.java.srcDirs)
            additionalClassDirs files(files(it.sourceSets.main['java'].outputDir).collect({
                File f -> fileTree(dir: f, exclude: ['org/apache/**','edu/**','org/geogebra/common/kernel/barycentric/**'])
            }))
        }
    }
}

jacocoTestReport {
   afterEvaluate {
       getClassDirectories().setFrom( files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['org/mozilla/**'])
        }))
    }
    reports {
        xml.enabled true
        html.enabled false
    }
}

configurations {
    testArtifacts.extendsFrom testCompile
}
task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
}
artifacts {
    testArtifacts testJar
}
