plugins {
    id "com.github.spotbugs" version "5.0.7"
    id 'application'
    id 'eclipse'
    id 'checkstyle'
}

project.setDescription('Parts of GeoGebra related to desktop platforms')

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
    e2eTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output
    }
}

configurations {
    e2eTestCompile.extendsFrom testCompile
    e2eTestCompile.extendsFrom testRuntime
}

eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
eclipse.classpath.file {
	// Eclipse dependecies are based on projects, not source paths
	whenMerged { classpath ->
		classpath.entries.removeAll { entry ->
			entry.kind == 'lib' && entry.path.matches(".*common-jre/build/.*/test") 
		}
	}
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    compile project(':common')
    compile project(':common-jre')
    compile project(':editor-desktop')
    compile project(':jogl2')
    compile project(':input3D:impl')
    compile project(':giac-jni')
    compile 'netscape.javascript:jsobject:1',
            'com.apple:mac_extensions:20040714',
            'com.ogprover:OpenGeoProver:20120725',
            'com.sun:jna:4.1.0'

    runtime "com.jogamp:jogl-all:$joglVersion:natives-linux-amd64",
        "com.jogamp:jogl-all:$joglVersion:natives-windows-i586",
        "com.jogamp:jogl-all:$joglVersion:natives-windows-amd64",
        "com.jogamp:jogl-all:$joglVersion:natives-macosx-universal"
    runtime "com.jogamp:gluegen-rt:$joglVersion:natives-linux-amd64",
        "com.jogamp:gluegen-rt:$joglVersion:natives-windows-i586",
        "com.jogamp:gluegen-rt:$joglVersion:natives-windows-amd64", 
        "com.jogamp:gluegen-rt:$joglVersion:natives-macosx-universal"
    runtime "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-linux-amd64",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-amd64",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-i586",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-macosx-universal"

    testCompile project(':keyboard-base')
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.hamcrest:hamcrest:$hamcrestVersion"
    testCompile project(':ggbjdk')
    testCompile project(path: ':common-jre', configuration: 'testArtifacts')
}

mainClassName = "org.geogebra.desktop.GeoGebra3D"

run {
    // Copying JOGL related native JARs into the same directory where the non-native JAR takes place.
    // JOGL is simply dumb, it cannot work neither with java.library.path nor classpath or anything. Arrgh. 
    def gluegen = project.configurations.compile.find { it.name == "gluegen-rt-${joglVersion}.jar" }
    def gluegen_natives = project.configurations.runtime.findAll { it.name.startsWith("gluegen-rt-$joglVersion-natives") }
    def gluegen_dir = gluegen.getParent()
    for (i in gluegen_natives) {
        def gluegen_native_path = i.getPath()
        ant.copy(file:"$gluegen_native_path", todir:"$gluegen_dir")
    }
    def jogl = project.configurations.compile.find { it.name == "jogl-all-${joglVersion}.jar" }
    def jogl_natives = project.configurations.runtime.findAll { it.name.startsWith("jogl-all-$joglVersion-natives") }
    def jogl_dir = jogl.getParent()
    for (i in jogl_natives) {
        def jogl_native_path = i.getPath()
        ant.copy(file:"$jogl_native_path", todir:"$jogl_dir")
    }

}
test {
    systemProperty "ggb.prerelease", project.findProperty("prerelease") ?: "true";

    ignoreFailures = true
    outputs.upToDateWhen { false }
}
spotbugs {
    ignoreFailures = true
    excludeFilter = file("../config/spotbugs.xml")
    jvmArgs = ['-Dfindbugs.sf.comment=true']
}

import org.gradle.plugins.ide.eclipse.model.AccessRule
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'com/**'))
            }
        }
    }
}

checkstyle {
    configFile file("../config/checkstyle/checkstyle.xml")
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'org.geogebra.desktop.GeoGebra3D'
        )
    }
}

task debugJars(type:Zip, dependsOn: 'jar') {
    description = 'Collect all jar files in a single archive. Fast: no proguard or code signing.'
    archiveBaseName = 'jars'
    destinationDirectory = file('build')
    from 'build/libs'
    doLast {
        configurations.compile.each { jarFile ->
            copy {
                from jarFile
                into 'build/libs'
            }
        }
    }
}

tasks['checkstyleMain'].setSource(files([]))

task e2eTest(type: Test) {
    description 'Run end-to-end tests'
    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
}
